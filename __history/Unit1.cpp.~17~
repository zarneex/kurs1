//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include <System.StrUtils.hpp>
#include "Unit1.h"
#include "Unit2.h"      //для связи двух форм
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
bool rad = false;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
int nm = 0;
if (Form2->Caption =="Добавление") {
nm = Form2->StringGrid1->RowCount - 1;
++Form2->StringGrid1->RowCount;
}
else {
int top = Form2->StringGrid1->Selection.Top;
nm = top;
}
// проверка корректности введенных данных
if (Edit1->Text.IsEmpty() || Edit2->Text.IsEmpty() || Edit3->Text.IsEmpty()
    || Edit5->Text.IsEmpty() || Edit6->Text.IsEmpty() || Edit7->Text.IsEmpty()
    || Edit9->Text.IsEmpty()) {
	ShowMessage("Необходимо заполнить все поля.");
	return;
}

int num;
if (!TryStrToInt(Edit4->Text, num) || !TryStrToInt(Edit8->Text, num)|| !TryStrToInt(Edit5->Text, num)) {
	// если не удалось преобразовать введенные значения в целочисленный тип,
    // выводим сообщение об ошибке и прерываем выполнение функции
	ShowMessage("Значения в полях Год рождения, Пол и Количество детей должны быть целочисленными.");
	return;
}

Form2->StringGrid1->Cells[0][nm] = IntToStr(nm);
Form2->StringGrid1->Cells[1][nm] = Edit1->Text;
Form2->StringGrid1->Cells[2][nm] = Edit2->Text;
Form2->StringGrid1->Cells[3][nm] = Edit3->Text;
Form2->StringGrid1->Cells[4][nm] = Edit4->Text;
Form2->StringGrid1->Cells[5][nm] = Edit5->Text;
Form2->StringGrid1->Cells[6][nm] = Edit6->Text;
Form2->StringGrid1->Cells[7][nm] = Edit7->Text;
Form2->StringGrid1->Cells[8][nm] = Edit8->Text;
Form2->StringGrid1->Cells[9][nm] = Edit9->Text;

rad = true;

Form2->Show();
Form1->Hide();
}
//---------------------------------------------------------------------------
//Переводить фокус на следующий компонент---------------------------------------------------------------------------

void __fastcall TForm1::Edit1KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit2->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit2KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit3->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit3KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit4->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit4KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
		if(Key == VK_RETURN) Edit5->SetFocus();
}
//---------------------------------------------------------------------------




void __fastcall TForm1::Edit5KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit6->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit6KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit7->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit7KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit8->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit8KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Edit9->SetFocus();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit9KeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key == VK_RETURN) Button1->SetFocus();
}
//---------------------------------------------------------------------------


void __fastcall TForm1::Edit1Exit(TObject *Sender)
{
	String text = Edit1->Text.Trim();
	if (!text.IsEmpty()) {
		text = text.SubString(1, 1).UpperCase() + text.SubString(2, text.Length() - 1).LowerCase();
		Edit1->Text = text;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit2Exit(TObject *Sender)
{
	String text = Edit2->Text.Trim();
	if (!text.IsEmpty()) {
		text = text.SubString(1, 1).UpperCase() + text.SubString(2, text.Length() - 1).LowerCase();
		Edit2->Text = text;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit3Exit(TObject *Sender)
{
	String text = Edit3->Text.Trim();
	if (!text.IsEmpty()) {
		text = text.SubString(1, 1).UpperCase() + text.SubString(2, text.Length() - 1).LowerCase();
		Edit3->Text = text;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit6Exit(TObject *Sender)
{
	String text = Edit6->Text.Trim();
	if (!text.IsEmpty()) {
		text = text.SubString(1, 1).UpperCase() + text.SubString(2, text.Length() - 1).LowerCase();
		Edit6->Text = text;
	}
}
//---------------------------------------------------------------------------

