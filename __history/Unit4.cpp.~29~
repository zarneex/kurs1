//---------------------------------------------------------------------------
#include <vcl.h>
#include <vector>  // подключаем vector для использования std::vector
#include <Vcl.Controls.hpp>
#include <Vcl.Grids.hpp>   // подключаем StringGrid
#include <SysUtils.hpp>
using namespace std;

#include "Unit4.h"
#include "Unit3.h"
#include "Unit2.h"
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm4 *Form4;
//---------------------------------------------------------------------------
__fastcall TForm4::TForm4(TComponent* Owner)
	: TForm(Owner)
{
// Можно установить начальные даты для TDateTimePicker
	//DateTimePicker1->Date = Now();  // Текущая дата по умолчанию
	//DateTimePicker2->Date = Now();  // Текущая дата по умолчанию
}
//---------------------------------------------------------------------------
// Функция для парсинга строки в TDateTime с нужным форматом
auto parseDate = [](AnsiString str) -> TDateTime {
	// Преобразуем дату в формат, который TryStrToDate всегда примет
	// Например, если дата в формате "DD.MM.YYYY", преобразуем ее в "YYYY-MM-DD"
	str = StringReplace(str, ".", "-", TReplaceFlags() << rfReplaceAll); // Заменяем точки на дефисы

	TDateTime date;
	if (!TryStrToDate(str, date)) {
		throw Exception("Ошибка: неверный формат даты - " + str);
	}
	return date;
};



#include <SysUtils.hpp> // Для StringReplace

void __fastcall TForm4::Button1Click(TObject *Sender)
{
    TDateTime Date1 = DateTimePicker1->Date;
    TDateTime Date2 = DateTimePicker2->Date;
    String formattedDate1 = Date1.FormatString("yyyy-mm-dd");
    String formattedDate2 = Date2.FormatString("yyyy-mm-dd");

    // Создаем временный список для подходящих строк
    TStringList *filteredRows = new TStringList;

    try {
        // Перебираем строки Form2->StringGrid1 для сравнения
        for (int row = 1; row < Form2->StringGrid1->RowCount; ++row) {
            // Получаем значение ячейки и заменяем '-' на '.'
            String cellValue = Form2->StringGrid1->Cells[6][row];
            cellValue = StringReplace(cellValue, "-", ".", TReplaceFlags() << rfReplaceAll);

            // Сравниваем даты
            if (formattedDate1 <= cellValue && formattedDate2 >= cellValue) {
                // Если дата подходит, сохраняем строку
                String rowData = "";
                for (int col = 0; col < Form2->StringGrid1->ColCount; ++col) {
                    String cellData = Form2->StringGrid1->Cells[col][row];
                    // Заменяем '.' обратно на '-' при сохранении строки
                    cellData = StringReplace(cellData, ".", "-", TReplaceFlags() << rfReplaceAll);
                    rowData += cellData + "\t"; // Разделитель для колонок
                }
                filteredRows->Add(rowData);
            }
        }

        // Очищаем все строки Form2->StringGrid1, кроме заголовков
        Form2->StringGrid1->RowCount = 1;

        // Добавляем отфильтрованные строки обратно в Form2->StringGrid1
        for (int i = 0; i < filteredRows->Count; ++i) {
            Form2->StringGrid1->RowCount = Form2->StringGrid1->RowCount + 1;
            TStringList *rowData = new TStringList;
            rowData->Delimiter = '\t';
            rowData->DelimitedText = filteredRows->Strings[i];

            for (int col = 0; col < rowData->Count; ++col) {
                // Заменяем '-' на '.' при выводе данных
                String cellData = rowData->Strings[col];
                cellData = StringReplace(cellData, "-", ".", TReplaceFlags() << rfReplaceAll);
                Form2->StringGrid1->Cells[col][Form2->StringGrid1->RowCount - 1] = cellData;
            }
            delete rowData;
        }
    }
    __finally {
        delete filteredRows;
    }
}


